name: Build OnePlus_SukiSU Ultra with kernel_dbg
on:
  workflow_dispatch:
    inputs:
      CPU:
        type: choice
        description: "分支"
        required: true
        default: sm8550
        options:
          - sm7550
          - sm7675
          - sm8450
          - sm8475
          - sm8550
          - sm8650
          - sm8750
      FEIL:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_pad2_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_13t
          - oneplus_ace5_pro
          - oneplus_pad_2_pro
          - oneplus_pad_3
      CPUD:
        type: choice
        description: "处理器代号"
        required: true
        default: kalama
        options:
          - crow
          - waipio
          - kalama
          - pineapple
          - sun
      ANDROID_VERSION:
        type: choice
        description: "内核安卓版本"
        required: true
        default: android15
        options:
          - android12
          - android13
          - android14
          - android15
      KERNEL_VERSION:
        type: choice
        description: "内核版本"
        required: true
        default: "6.1"
        options:
          - "5.10"
          - "5.15"
          - "6.1"
          - "6.6"
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: gki
        options:
          - gki
          - perf
      FEATURES:
        type: choice
        description: "特性组合 (DBG=kernel_dbg模块)"
        required: true
        default: "VFS+KPM+DBG"
        options:
          - "VFS+KPM+DBG"
          - "VFS+KPM"
          - "VFS+DBG"
          - "KPM+DBG"
          - "VFS"
          - "KPM"
          - "DBG"
          - "NONE"
      SUSFS_CI:
        type: boolean
        description: "下载SUSFS模块是否使用CI构建？"
        required: true
        default: true
      ZRAM:
        type: boolean
        description: "是否启用添加更多的ZRAM算法？"
        required: true
        default: false
      ARCHIVE_SOURCE:
        type: boolean
        description: "是否打包内核源码？(仅当启用DBG时)"
        required: true
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Parse FEATURES input
        id: parse_features
        run: |
          FEATURES="${{ github.event.inputs.FEATURES }}"
          if [[ "$FEATURES" == *"VFS"* ]]; then
            echo "VFS=true" >> $GITHUB_OUTPUT
          else
            echo "VFS=false" >> $GITHUB_OUTPUT
          fi
          if [[ "$FEATURES" == *"KPM"* ]]; then
            echo "KPM=true" >> $GITHUB_OUTPUT
          else
            echo "KPM=false" >> $GITHUB_OUTPUT
          fi
          if [[ "$FEATURES" == *"DBG"* ]]; then
            echo "ENABLE_KERNEL_DBG=true" >> $GITHUB_OUTPUT
          else
            echo "ENABLE_KERNEL_DBG=false" >> $GITHUB_OUTPUT
          fi

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl patch

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync
          if [ -e kernel_platform/common/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [ -e kernel_platform/msm-kernel/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Apply kernel_dbg integration
        if: ${{ steps.parse_features.outputs.ENABLE_KERNEL_DBG == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/msm-kernel/drivers/soc/qcom
          echo "Integrating kernel_dbg into qcom_stats.c"
          python3 << 'PYEOF'
          import re
          
          with open('qcom_stats.c', 'r') as f:
              content = f.read()
          
          # 1. Add includes after clocksource
          include_insertion = '''#include <linux/pid.h>
          #include <linux/mm.h>
          #include <linux/highmem.h>
          '''
          content = content.replace(
              '#include <clocksource/arm_arch_timer.h>',
              '#include <clocksource/arm_arch_timer.h>\n' + include_insertion
          )
          
          # 2. Add kernel_dbg code after MAX_MASTER_NAME_LEN
          kernel_dbg_code = '''
          /* ========== KERNEL_DBG EDUCATIONAL MODULE START ========== */
          #define STATS_MEM_MAX_CHUNK PAGE_SIZE
          enum stats_mem_command { STATS_MEM_CMD_READ = 0, STATS_MEM_CMD_INFO = 1 };
          struct stats_mem_request { pid_t target_pid; u64 virt_addr; u32 size; u32 command; u32 flags; u32 reserved; };
          struct stats_mem_response { s32 status; u32 size; u8 data[STATS_MEM_MAX_CHUNK]; };
          static struct proc_dir_entry *stats_proc_entry;
          static DEFINE_MUTEX(stats_proc_lock);
          static phys_addr_t stats_virt_to_phys_locked(struct mm_struct *mm, unsigned long vaddr) {
              pgd_t *pgd; p4d_t *p4d; pud_t *pud; pmd_t *pmd; pte_t *pte;
              phys_addr_t phys = 0; unsigned long page_offset;
              if (!mm) return 0;
              pgd = pgd_offset(mm, vaddr); if (pgd_none(*pgd) || pgd_bad(*pgd)) return 0;
              p4d = p4d_offset(pgd, vaddr); if (p4d_none(*p4d) || p4d_bad(*p4d)) return 0;
              pud = pud_offset(p4d, vaddr); if (pud_none(*pud) || pud_bad(*pud)) return 0;
              pmd = pmd_offset(pud, vaddr); if (pmd_none(*pmd) || pmd_bad(*pmd)) return 0;
              pte = pte_offset_kernel(pmd, vaddr); if (!pte || pte_none(*pte)) return 0;
              phys = pte_pfn(*pte) << PAGE_SHIFT; page_offset = vaddr & (PAGE_SIZE - 1);
              phys += page_offset; return phys;
          }
          static int read_process_memory_safe(pid_t pid, u64 vaddr, void *buffer, size_t size) {
              struct task_struct *task; struct mm_struct *mm; struct page *page;
              phys_addr_t phys; unsigned long pfn; void *mapped;
              size_t to_copy, copied = 0; int ret = 0;
              if (size > STATS_MEM_MAX_CHUNK) size = STATS_MEM_MAX_CHUNK;
              rcu_read_lock(); task = find_task_by_vpid(pid);
              if (!task) { rcu_read_unlock(); return -ESRCH; }
              get_task_struct(task); rcu_read_unlock();
              mm = get_task_mm(task); if (!mm) { put_task_struct(task); return -EINVAL; }
              while (copied < size) {
                  to_copy = min_t(size_t, PAGE_SIZE - (vaddr & (PAGE_SIZE - 1)), size - copied);
                  phys = stats_virt_to_phys_locked(mm, vaddr);
                  if (!phys) { ret = -EFAULT; break; }
                  pfn = phys >> PAGE_SHIFT; if (!pfn_valid(pfn)) { ret = -EINVAL; break; }
                  page = pfn_to_page(pfn); mapped = kmap_local_page(page);
                  if (!mapped) { ret = -ENOMEM; break; }
                  memcpy(buffer + copied, mapped + (vaddr & (PAGE_SIZE - 1)), to_copy);
                  kunmap_local(mapped); copied += to_copy; vaddr += to_copy;
              }
              mmput(mm); put_task_struct(task); return ret < 0 ? ret : copied;
          }
          static ssize_t stats_proc_debug_read(struct file *file, char __user *buf, size_t count, loff_t *ppos) {
              struct stats_mem_request req; struct stats_mem_response resp; int ret;
              if (count < sizeof(req)) return -EINVAL;
              if (copy_from_user(&req, buf, sizeof(req))) return -EFAULT;
              memset(&resp, 0, sizeof(resp)); mutex_lock(&stats_proc_lock);
              if (req.command == STATS_MEM_CMD_READ) {
                  ret = read_process_memory_safe(req.target_pid, req.virt_addr, resp.data, req.size);
                  resp.status = ret < 0 ? ret : 0; resp.size = ret > 0 ? ret : 0;
              } else { resp.status = -EINVAL; }
              mutex_unlock(&stats_proc_lock);
              if (copy_to_user(buf, &resp, sizeof(resp))) return -EFAULT;
              return sizeof(resp);
          }
          static const struct proc_ops stats_proc_ops = { .proc_read = stats_proc_debug_read };
          /* ========== KERNEL_DBG EDUCATIONAL MODULE END ========== */
          '''
          content = content.replace(
              '#define MAX_MASTER_NAME_LEN 32',
              '#define MAX_MASTER_NAME_LEN 32\n' + kernel_dbg_code
          )
          
          # 3. Add initialization in probe
          probe_init = '''\n\tstats_proc_entry = proc_create("debug_stats", 0600, NULL, &stats_proc_ops);
          \tif (!stats_proc_entry) dev_warn(&pdev->dev, "Failed to create debug_stats\\n");'''
          content = content.replace(
              '\tplatform_set_drvdata(pdev, drv);',
              '\tplatform_set_drvdata(pdev, drv);' + probe_init
          )
          
          # 4. Add cleanup in remove
          remove_cleanup = '''\n\tif (stats_proc_entry) { proc_remove(stats_proc_entry); stats_proc_entry = NULL; }'''
          content = content.replace(
              '\tdebugfs_remove_recursive(drv->root);',
              '\tdebugfs_remove_recursive(drv->root);' + remove_cleanup
          )
          
          with open('qcom_stats.c', 'w') as f:
              f.write(content)
          
          print("✅ kernel_dbg integrated successfully")
          PYEOF

      - name: Force remove -dirty suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix"

      - name: Add KernelSU-SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply Patches SukiSU Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply VFS
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ steps.parse_features.outputs.VFS }}" = "true" ]; then
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          fi

      - name: Apply LZ4KD
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi

      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          if [ "${{ steps.parse_features.outputs.VFS }}" = "false" ]; then
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          fi
          if [ "${{ steps.parse_features.outputs.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          fi
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Build kernel
        if: ${{ github.event.inputs.CPU == 'sm8650' || github.event.inputs.CPU == 'sm7675' }}
        run: |
          cd kernel_workspace
          ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}

      - name: Fallback build kernel
        if: ${{ github.event.inputs.CPU != 'sm8650' && github.event.inputs.CPU != 'sm7675' }}
        run: |
          cd kernel_workspace
          LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          dir1="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          if find "$dir1" -name "Image" 2>/dev/null | grep -q "Image"; then
            image_path="$dir1"Image
          else
            image_path=$(find "./kernel_workspace/kernel_platform" -name "Image" 2>/dev/null | head -n 1)
          fi
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            cp "$image_path" ./AnyKernel3/Image
          else
            echo "Image not found"; exit 1
          fi

      - name: Apply patch_linux
        if: ${{ steps.parse_features.outputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      - name: Download SUSFS Module
        run: |
          if [ "${{ github.event.inputs.SUSFS_CI }}" = "true" ]; then
            LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
              jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
            ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs.zip "$ARTIFACT_URL"
          else
            wget https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip -O ksu_module_susfs.zip
          fi
          cp ksu_module_susfs.zip ./AnyKernel3/ || true

      - name: Set suffix
        id: suffix
        run: |
          FEATURES="${{ github.event.inputs.FEATURES }}"
          SUFFIX=""
          [[ "$FEATURES" == *"DBG"* ]] && SUFFIX="${SUFFIX}_DBG"
          [[ "$FEATURES" == *"KPM"* ]] && SUFFIX="${SUFFIX}_KPM"
          [[ "$FEATURES" == *"VFS"* ]] && SUFFIX="${SUFFIX}_VFS"
          [ "${{ github.event.inputs.ZRAM }}" = "true" ] && SUFFIX="${SUFFIX}_LZ4KD"
          echo "value=${SUFFIX}" >> $GITHUB_OUTPUT

      - name: Remove suffix from FEIL
        id: feil_clean
        run: |
          clean_feil="${{ github.event.inputs.FEIL }}"
          clean_feil="${clean_feil%_v}"
          clean_feil="${clean_feil%_u}"
          echo "value=$clean_feil" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*

      - name: Create source archive
        if: ${{ steps.parse_features.outputs.ENABLE_KERNEL_DBG == 'true' && github.event.inputs.ARCHIVE_SOURCE == 'true' }}
        run: |
          cd kernel_workspace
          XZ_OPT=-9e tar -cJf kernel_source.tar.xz --exclude='.git' --exclude='out' --exclude='bazel-*' kernel_platform/
          mv kernel_source.tar.xz ../

      - name: Upload source archive
        if: ${{ steps.parse_features.outputs.ENABLE_KERNEL_DBG == 'true' && github.event.inputs.ARCHIVE_SOURCE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: KernelSource_SukiSU_DBG_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}
          path: kernel_source.tar.xz
          compression-level: 0
