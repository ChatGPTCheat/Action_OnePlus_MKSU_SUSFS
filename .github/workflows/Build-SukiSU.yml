name: Build OnePlus_SukiSU Ultra All
on:
  workflow_dispatch:
    inputs:
      CPU:
        type: choice
        description: "分支"
        required: true
        default: sm8550
        options:
          - sm7550
          - sm7675
          - sm8450
          - sm8475
          - sm8550
          - sm8650
          - sm8750
      FEIL:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_ace2_pro_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_13t
          - oneplus_ace5_pro
          - oneplus_pad_2_pro
          - oneplus_pad_3
          - GitHub有bug可能不显示最后一项,误使用此项
      CPUD:
        type: choice
        description: "处理器代号"
        required: true
        default: kalama
        options:
          - crow
          - waipio
          - kalama
          - pineapple
          - sun
      ANDROID_VERSION:
        type: choice
        description: "内核安卓版本"
        required: true
        default: android15
        options:
          - android12
          - android13
          - android14
          - android15
      KERNEL_VERSION:
        type: choice
        description: "内核版本"
        required: true
        default: "5.15"
        options:
          - "5.10"
          - "5.15"
          - "6.1"
          - "6.6"
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: gki
        options:
          - gki
          - perf
      SUSFS_CI:
        type: boolean
        description: "下载SUSFS模块是否使用CI构建？"
        required: true
        default: true
      VFS:
        type: boolean
        description: "是否启用手动钩子？"
        required: true
        default: true
      KPM:
        type: boolean
        description: "是否启用KPM？"
        required: true
        default: true
      ZRAM:
        type: boolean
        description: "是否启用添加更多的ZRAM算法？"
        required: true
        default: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl jq zip unzip

      - name: Show selected inputs debug
        run: |
          echo "Selected CPU: ${{ github.event.inputs.CPU }}"
          echo "Selected FEIL: ${{ github.event.inputs.FEIL }}"
          echo "Selected CPUD: ${{ github.event.inputs.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ github.event.inputs.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ github.event.inputs.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ github.event.inputs.BUILD_METHOD }}"
          echo "Selected SUSFS_CI: ${{ github.event.inputs.SUSFS_CI }}"
          echo "Selected ZRAM: ${{ github.event.inputs.ZRAM }}"
          echo "Selected VFS: ${{ github.event.inputs.VFS }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo sync
          if [  -e kernel_platform/common/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [  -e kernel_platform/msm-kernel/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Force remove -dirty suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version" || true

      - name: Add KernelSU-SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) + 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply Patches SukiSU Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          echo "正在给内核打susfs补丁"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
          echo "正在给内核打zram补丁"
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi

          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          echo "完成"

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply VFS
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "正在打vfs补丁"
          patch -p1 -F 3 < syscall_hooks.patch
          echo "vfs_patch完成"
          fi

      - name: Apply LZ4KD
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch ./
            echo "正在打lz4kd补丁"
            patch -p1 -F 3 < lz4kd.patch || true
            echo '完成LZ4KD补丁'
          fi

      - name: Add kernel_dbg debug interface
        run: |
          cd kernel_workspace/kernel_platform/common/drivers/soc/qcom
          cat > kernel_dbg.c << 'KERNEL_DBG_EOF'
          // SPDX-License-Identifier: GPL-2.0-only
          
          #include <linux/module.h>
          #include <linux/kernel.h>
          #include <linux/proc_fs.h>
          #include <linux/uaccess.h>
          #include <linux/slab.h>
          #include <linux/mm.h>
          #include <linux/sched/mm.h>
          #include <linux/sched/task.h>
          #include <linux/highmem.h>
          #include <linux/pid.h>
          #include <linux/page_ref.h>
          #include <linux/string.h>
          #include <linux/mutex.h>
          
          #define STATS_PROC_NAME "debug_stats"
          #define STATS_MAX_LENGTH (PAGE_SIZE * 16)
          
          struct stats_mem_request {
          	pid_t pid;
          	unsigned long virt_addr;
          	size_t length;
          	int command;
          };
          
          #define STATS_MEM_CMD_READ 1
          
          struct kernel_dbg_session {
          	struct mutex lock;
          	void *data;
          	size_t data_len;
          	bool data_ready;
          };
          
          static struct proc_dir_entry *stats_proc_entry;
          
          static phys_addr_t stats_virt_to_phys_locked(struct mm_struct *mm,
          					     unsigned long virt_addr)
          {
          	pgd_t *pgd;
          	p4d_t *p4d;
          	pud_t *pud;
          	pmd_t *pmd;
          	pte_t *pte;
          	phys_addr_t phys_addr = 0;
          	struct page *page = NULL;
          
          	pgd = pgd_offset(mm, virt_addr);
          	if (pgd_none(*pgd) || pgd_bad(*pgd))
          		return 0;
          	p4d = p4d_offset(pgd, virt_addr);
          	if (p4d_none(*p4d) || p4d_bad(*p4d))
          		return 0;
          	pud = pud_offset(p4d, virt_addr);
          	if (pud_none(*pud) || pud_bad(*pud))
          		return 0;
          	pmd = pmd_offset(pud, virt_addr);
          	if (pmd_none(*pmd) || pmd_bad(*pmd))
          		return 0;
          	pte = pte_offset_kernel(pmd, virt_addr);
          	if (!pte || !pte_present(*pte))
          		return 0;
          	page = pte_page(*pte);
          	if (!page)
          		return 0;
          	phys_addr = page_to_phys(page) + (virt_addr & ~PAGE_MASK);
          	return phys_addr;
          }
          
          static void *kernel_dbg_map_page(struct page *page)
          {
          #ifdef CONFIG_KMAP_LOCAL
          	return kmap_local_page(page);
          #else
          	if (PageHighMem(page))
          		return NULL;
          	return page_address(page);
          #endif
          }
          
          static void kernel_dbg_unmap_page(void *addr)
          {
          #ifdef CONFIG_KMAP_LOCAL
          	kunmap_local(addr);
          #endif
          }
          
          static int read_process_memory_safe(pid_t pid, unsigned long virt_addr,
          				    void *buffer, size_t length)
          {
          	struct task_struct *task;
          	struct mm_struct *mm;
          	unsigned long offset;
          	size_t to_read, read_bytes = 0;
          	int ret = -ESRCH;
          
          	rcu_read_lock();
          	task = pid_task(find_vpid(pid), PIDTYPE_PID);
          	if (!task) {
          		rcu_read_unlock();
          		return -ESRCH;
          	}
          	get_task_struct(task);
          	rcu_read_unlock();
          
          	mm = get_task_mm(task);
          	if (!mm) {
          		put_task_struct(task);
          		return -EINVAL;
          	}
          
          	mmap_read_lock(mm);
          
          	while (read_bytes < length) {
          		phys_addr_t phys_addr;
          		struct page *page;
          		void *mapped;
          
          		offset = virt_addr & ~PAGE_MASK;
          		to_read = min_t(size_t, PAGE_SIZE - offset, length - read_bytes);
          
          		phys_addr = stats_virt_to_phys_locked(mm, virt_addr);
          		if (!phys_addr) {
          			ret = -EFAULT;
          			break;
          		}
          
          		page = pfn_to_page(__phys_to_pfn(phys_addr));
          		if (!page || !page_ref_count(page)) {
          			ret = -EFAULT;
          			break;
          		}
          
          		mapped = kernel_dbg_map_page(page);
          		if (!mapped) {
          			ret = -ENOMEM;
          			break;
          		}
          
          		memcpy((char *)buffer + read_bytes, (char *)mapped + offset, to_read);
          		kernel_dbg_unmap_page(mapped);
          
          		read_bytes += to_read;
          		virt_addr += to_read;
          	}
          
          	mmap_read_unlock(mm);
          	mmput(mm);
          	put_task_struct(task);
          
          	return read_bytes > 0 ? read_bytes : ret;
          }
          
          static int kernel_dbg_open(struct inode *inode, struct file *file)
          {
          	struct kernel_dbg_session *session;
          
          	session = kzalloc(sizeof(*session), GFP_KERNEL);
          	if (!session)
          		return -ENOMEM;
          
          	mutex_init(&session->lock);
          	file->private_data = session;
          	return 0;
          }
          
          static int kernel_dbg_release(struct inode *inode, struct file *file)
          {
          	struct kernel_dbg_session *session = file->private_data;
          
          	if (!session)
          		return 0;
          
          	kfree(session->data);
          	mutex_destroy(&session->lock);
          	kfree(session);
          	return 0;
          }
          
          static ssize_t kernel_dbg_write(struct file *file, const char __user *buf,
          				size_t count, loff_t *ppos)
          {
          	struct kernel_dbg_session *session = file->private_data;
          	struct stats_mem_request req;
          	void *data = NULL;
          	int ret;
          
          	if (!session)
          		return -EINVAL;
          	if (*ppos != 0)
          		return -EINVAL;
          	if (count != sizeof(req))
          		return -EINVAL;
          
          	if (copy_from_user(&req, buf, sizeof(req)))
          		return -EFAULT;
          
          	if (req.command != STATS_MEM_CMD_READ)
          		return -EINVAL;
          	if (!req.length || req.length > STATS_MAX_LENGTH)
          		return -EINVAL;
          
          	data = kzalloc(req.length, GFP_KERNEL);
          	if (!data)
          		return -ENOMEM;
          
          	ret = read_process_memory_safe(req.pid, req.virt_addr, data, req.length);
          	if (ret < 0) {
          		kfree(data);
          		return ret;
          	}
          
          	mutex_lock(&session->lock);
          	kfree(session->data);
          	session->data = data;
          	session->data_len = ret;
          	session->data_ready = true;
          	mutex_unlock(&session->lock);
          
          	*ppos = 0;
          	return sizeof(req);
          }
          
          static ssize_t kernel_dbg_read(struct file *file, char __user *buf,
          			       size_t count, loff_t *ppos)
          {
          	struct kernel_dbg_session *session = file->private_data;
          	ssize_t ret;
          
          	if (!session)
          		return -EINVAL;
          
          	mutex_lock(&session->lock);
          
          	if (!session->data_ready) {
          		ret = -ENODATA;
          		goto out_unlock;
          	}
          
          	ret = simple_read_from_buffer(buf, count, ppos, session->data, session->data_len);
          	if (ret >= 0 && *ppos >= session->data_len) {
          		session->data_ready = false;
          		*ppos = 0;
          	}
          
          out_unlock:
          	mutex_unlock(&session->lock);
          	return ret;
          }
          
          static const struct proc_ops stats_proc_ops = {
          	.proc_open = kernel_dbg_open,
          	.proc_release = kernel_dbg_release,
          	.proc_read = kernel_dbg_read,
          	.proc_write = kernel_dbg_write,
          	.proc_lseek = no_llseek,
          };
          
          static int __init kernel_dbg_init(void)
          {
          	pr_info("kernel_dbg: Virtual DMA interface init\n");
          
          	stats_proc_entry = proc_create(STATS_PROC_NAME, 0600, NULL, &stats_proc_ops);
          	if (!stats_proc_entry) {
          		pr_err("kernel_dbg: failed to create /proc/%s\n", STATS_PROC_NAME);
          		return -ENOMEM;
          	}
          
          	pr_info("kernel_dbg: /proc/%s ready\n", STATS_PROC_NAME);
          	return 0;
          }
          
          static void __exit kernel_dbg_exit(void)
          {
          	if (stats_proc_entry) {
          		proc_remove(stats_proc_entry);
          		pr_info("kernel_dbg: removed\n");
          	}
          }
          
          module_init(kernel_dbg_init);
          module_exit(kernel_dbg_exit);
          
          MODULE_LICENSE("GPL v2");
          MODULE_DESCRIPTION("Virtual DMA interface");
          MODULE_AUTHOR("5ec1cff");
          MODULE_VERSION("1.0");
          KERNEL_DBG_EOF
          
          if ! grep -q 'kernel_dbg.o' Makefile; then
            echo 'obj-y += kernel_dbg.o' >> Makefile
          fi

      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ github.event.inputs.KERNEL_VERSION }}"

          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          if [ "${{ github.event.inputs.VFS }}" = "false" ]; then
          echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          fi
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          fi

          if [ "${{ github.event.inputs.VFS }}" = "false" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          fi

          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          fi

          sed -i 's/check_defconfig//' ./common/build.config.gki

          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.10" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
              echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" != "6.6" ] && [ "${{ github.event.inputs.KERNEL_VERSION }}" != "5.10" ]; then
              if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
                sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
              else
                echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              fi
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.KERNEL_VERSION }}" = "6.6" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ github.event.inputs.ANDROID_VERSION }}" = "android14" ] || [ "${{ github.event.inputs.ANDROID_VERSION }}" = "android15" ]; then
              if [  -e ./common/modules.bzl ]; then
                sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./common/modules.bzl"
              fi

              if [  -e ./msm-kernel/modules.bzl ]; then
                sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./msm-kernel/modules.bzl"
                echo "CONFIG_ZSMALLOC=y" >> "msm-kernel/arch/arm64/configs/${{ github.event.inputs.CPUD }}-GKI.config"
                echo "CONFIG_ZRAM=y" >> "msm-kernel/arch/arm64/configs/${{ github.event.inputs.CPUD }}-GKI.config"
              fi

              echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
            elif [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.10" ] || [ "${{ github.event.inputs.KERNEL_VERSION }}" = "5.15" ]; then
              rm "common/android/gki_aarch64_modules" || true
              touch "common/android/gki_aarch64_modules"
            fi

            if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
              echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
            fi
          fi

      - name: Build kernel
        if: ${{ github.event.inputs.CPU == 'sm8650' || github.event.inputs.CPU == 'sm7675' }}
        run: |
          cd kernel_workspace
          ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}

      - name: Fallback build kernel
        if: ${{ github.event.inputs.CPU != 'sm8650' && github.event.inputs.CPU != 'sm7675' }}
        run: |
         cd kernel_workspace
         LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git

          dir1="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          dir2="kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/"
          dir3="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist/"
          dir4="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          dir5="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"

          if find "$dir1" -name "Image" | grep -q "Image"; then
            image_path="${dir1}Image"
          elif find "$dir2" -name "Image" | grep -q "Image"; then
            image_path="${dir2}Image"
          elif find "$dir3" -name "Image" | grep -q "Image"; then
            image_path="${dir3}Image"
          elif find "$dir4" -name "Image" | grep -q "Image"; then
            image_path="${dir4}Image"
          elif find "$dir5" -name "Image" | grep -q "Image"; then
            image_path="${dir5}Image"
          else
            image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          fi

          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            mkdir -p "$dir1"
            if [ "$(realpath "$image_path")" != "$(realpath "${dir1}Image")" ]; then
              cp "$image_path" "$dir1"
            else
              echo "源文件与目标相同，跳过复制"
            fi
            cp "${dir1}Image" ./AnyKernel3/Image
          else
            echo "未找到 Image 文件，构建可能失败"
            exit 1
          fi

          if [ "${{ github.event.inputs.CPU }}" = "sm8750" ]; then
          for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
            if [ -f "${dir1}${file}" ]; then
              target_name="$file"
              if [ "$file" = "system_dlkm.erofs.img" ]; then
                target_name="system_dlkm.img"
              fi
              cp "${dir1}${file}" "./AnyKernel3/${target_name}"
            else
              echo "$file 不存在，跳过复制"
            fi
          done
          fi

      - name: Apply patch_linux and replace Image
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}/dist

          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      - name: Download Latest SUSFS Module from CI
        if: ${{ github.event.inputs.SUSFS_CI == 'true' }}
        run: |
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
            jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "No successful run found for branch v1.5.2+"
            exit 1
          fi

          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')

          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs.zip "$ARTIFACT_URL"
          cp ksu_module_susfs.zip ./AnyKernel3/

      - name: Download Latest SUSFS Module from Release
        if: ${{ github.event.inputs.SUSFS_CI == 'false' }}
        run: |
          wget https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip
          cp ksu_module_susfs_1.5.2+.zip ./AnyKernel3/

      - name: Set suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.VFS == 'true' && '_VFS' || '' }}${{ github.event.inputs.ZRAM == 'true' && '_LZ4KD' || '' }}" >> $GITHUB_OUTPUT

      - name: Remove _uv suffix from FEIL
        id: feil_clean
        run: |
          clean_feil="${{ github.event.inputs.FEIL }}"
          clean_feil="${clean_feil%_v}"
          clean_feil="${clean_feil%_u}"
          echo "value=$clean_feil" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*
